import datetime

class Usuario:
    def __init__(self, nome, data_nascimento, cpf, endereco):
        self.nome = nome
        self.data_nascimento = data_nascimento
        self.cpf = cpf
        self.endereco = endereco

class ContaCorrente:
    numero_conta_sequencial = 1

    def __init__(self, usuario):
        self.usuario = usuario
        self.agencia = "0001"
        self.numero_conta = ContaCorrente.numero_conta_sequencial
        ContaCorrente.numero_conta_sequencial += 1
        self.saldo = 0.0
        self.saques_diarios = 0
        self.limite_saques = 3
        self.limite_valor_saque = 500.0
        self.extrato = []
        self.data_ultimo_saque = None

    def formatar_valor(self, valor):
        return f"R$ {valor:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')

    def depositar(self, /, valor):
        if valor > 0:
            self.saldo += valor
            self.extrato.append(f"Depósito: {self.formatar_valor(valor)}")
        else:
            print("Valor de depósito inválido.")

    def sacar(self, *, valor):
        hoje = datetime.date.today()
        if self.data_ultimo_saque != hoje:
            self.saques_diarios = 0
            self.data_ultimo_saque = hoje

        if valor <= 0:
            print("Não é possível sacar valores negativos ou zero.")
        elif valor > self.saldo:
            print("Sua conta não tem saldo suficiente.")
        elif self.saques_diarios >= self.limite_saques:
            print("Limite de saques diários atingido.")
        elif valor > self.limite_valor_saque:
            print("O valor máximo para saque é de R$ 500,00.")
        else:
            self.saldo -= valor
            self.saques_diarios += 1
            self.extrato.append(f"Saque: {self.formatar_valor(valor)}")

    def mostrar_extrato(self, /, *, detalhado=False):
        print("\nExtrato:")
        for operacao in self.extrato:
            print(operacao)
        print(f"Saldo atual: {self.formatar_valor(self.saldo)}")
        if detalhado:
            print(f"Usuário: {self.usuario.nome}, CPF: {self.usuario.cpf}")
        print()

class Banco:
    def __init__(self):
        self.usuarios = []
        self.contas = []

    def cadastrar_usuario(self, nome, data_nascimento, cpf, endereco):
        if any(usuario.cpf == cpf for usuario in self.usuarios):
            print("Já existe um usuário cadastrado com este CPF.")
        else:
            usuario = Usuario(nome, data_nascimento, cpf, endereco)
            self.usuarios.append(usuario)
            print("Usuário cadastrado com sucesso.")

    def cadastrar_conta_corrente(self, cpf):
        usuario = next((usuario for usuario in self.usuarios if usuario.cpf == cpf), None)
        if usuario:
            conta = ContaCorrente(usuario)
            self.contas.append(conta)
            print("Conta corrente cadastrada com sucesso.")
        else:
            print("Usuário não encontrado.")

    def buscar_usuario_por_cpf(self, cpf):
        return next((usuario for usuario in self.usuarios if usuario.cpf == cpf), None)

    def mostrar_dados_usuario(self, cpf):
        usuario = self.buscar_usuario_por_cpf(cpf)
        if usuario:
            print(f"Nome: {usuario.nome}")
            print(f"Data de Nascimento: {usuario.data_nascimento}")
            print(f"CPF: {usuario.cpf}")
            print(f"Endereço: {usuario.endereco}")
            contas_usuario = [conta for conta in self.contas if conta.usuario.cpf == cpf]
            for conta in contas_usuario:
                print(f"\nConta Corrente:")
                print(f"Agência: {conta.agencia}")
                print(f"Número da Conta: {conta.numero_conta}")
                print(f"Saldo: {conta.formatar_valor(conta.saldo)}")
        else:
            print("Usuário não encontrado.")

def menu():
    banco = Banco()
    while True:
        print("Escolha uma operação:")
        print("[1] Cadastrar Usuário")
        print("[2] Cadastrar Conta Corrente")
        print("[3] Buscar Usuário por CPF")
        print("[4] Mostrar Dados do Usuário")
        print("[d] Depositar")
        print("[s] Sacar")
        print("[e] Extrato")
        print("[q] Sair")
        escolha = input().lower()

        if escolha == '1':
            nome = input("Nome: ")
            data_nascimento = input("Data de Nascimento (dd/mm/yyyy): ")
            cpf = input("CPF (somente números): ")
            endereco = input("Endereço (logradouro-bairro-cidade/sigla estado): ")
            banco.cadastrar_usuario(nome, data_nascimento, cpf, endereco)
        elif escolha == '2':
            cpf = input("CPF do usuário (somente números): ")
            banco.cadastrar_conta_corrente(cpf)
        elif escolha == '3':
            cpf = input("CPF do usuário (somente números): ")
            usuario = banco.buscar_usuario_por_cpf(cpf)
            if usuario:
                print(f"Usuário encontrado: {usuario.nome}, CPF: {usuario.cpf}, Endereço: {usuario.endereco}")
            else:
                print("Usuário não encontrado.")
        elif escolha == '4':
            cpf = input("CPF do usuário (somente números): ")
            banco.mostrar_dados_usuario(cpf)
        elif escolha == 'd':
            cpf = input("CPF do usuário (somente números): ")
            conta = next((conta for conta in banco.contas if conta.usuario.cpf == cpf), None)
            if conta:
                valor = float(input("Digite o valor para depósito: "))
                conta.depositar(valor)
            else:
                print("Conta não encontrada.")
        elif escolha == 's':
            cpf = input("CPF do usuário (somente números): ")
            conta = next((conta for conta in banco.contas if conta.usuario.cpf == cpf), None)
            if conta:
                valor = float(input("Digite o valor para saque: "))
                conta.sacar(valor=valor)
            else:
                print("Conta não encontrada.")
        elif escolha == 'e':
            cpf = input("CPF do usuário (somente números): ")
            conta = next((conta for conta in banco.contas if conta.usuario.cpf == cpf), None)
            if conta:
                conta.mostrar_extrato(detalhado=True)
            else:
                print("Conta não encontrada.")
        elif escolha == 'q':
            print("Saindo do sistema...")
            break
        else:
            print("Escolha inválida. Tente novamente.")

if __name__ == "__main__":
    menu()
